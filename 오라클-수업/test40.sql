-- 요구사항 분석 (테이블 => 데이터 수집(Jsoup, 공공데이터 포털))
/*
	data.go.kr / data.seoul.go.kr
	1) 요구사항 분석
		= 벤치마킹
		= 페이지 분석 => 필요한 데이터 추출
		----------------------------------------
		= 개념적 설계 = 데이터 추출 
		= 논리적 설계 = 데이터형, 키 종류 설정
		= 물리적 설계 = 데이터 크기 설정 => 테이블
		----------------------------------------
		현재 이력서 통과율
			=> 자기 계발 (기록 => GIT => README)
			=> 스타일 (로직) => 끈기 / 고집 / 능동적 / 의견 제시

		기본 프로그래밍
			=> 자바 / 오라클
				데이터형 / 변수 / 제어문 / 메소드 / 연산자 / 객체지향 프로그램 
				=> 자료구조 / 알고리즘 / 디자인 패턴
				=> String / IO / Collection
				=> DAO
				=> DML / DDL
				=> GIT => 버전 관리

		프론트 연동 : HTML / CSS / JavaScript
			=> 프레임 워크 : Vue / React
			=> DOM (Jquery), 이벤트 / RestFul

		협업 / 배포
			=> 프로젝트 / GIT / Docker / Docker-Hub / MiniKube / Jenkins
			=> 리눅스 명령어

		=> 테스트 (Junit) : 단위 테스트
		=> 과정 => 개인 프로젝트 (완성)
			따라하고 *직접 구현, 어디까지 알고 있는지 파악, *문제 해결 능력 키울 것


		=> ER 모델 / 정규화(1, 2, 3) : 제약 조건, 키의 종류
			=> 한 번에 완성 => ALTER

		ER-모델
			엔티티 (개체) : 테이블 (사각형)
			속성 : 컬럼 (타원형)
			관계도 : 외래키 (마름모)
		
			예)	
				요구사항
					한 학교는 학생과 과목, 수강한 정보를 관리
					한 학생은 여러 개의 과목을 수강, 한 과목은 여러 학생이 수강 가능
					학생 (학번, 이름, 학년, 전공)
					과목 (과목 코드, 과목명, 학점)
					수강 시에는 성적을 기록

					엔티티
						학생 테이블 / 과목 테이블

					관계
						수강의 관계도 : N:M

					속성
						1. 학생 : 학번, 이름, 학년, 전공
						2. 과목 : 과목 코드, 과목명, 학점
				
					=> ER
						학생 (학번(PK), 이름, 학년, 전공)
						  ↓
						수강 (학번(FK), 과목 코드(FK), 성적) => 매핑 테이블
						  ↑
						과목 (과목 코드(PK), 과목명, 학점) 


				맛집(번호, 업체명...) --- 찜(관계도) --- 찜 등록(ID, 번호...)
					
					회원 (ID(PK), 이름, 주소, 전화...)
					↓
					찜 => N:M (ID(FK), 맛집 번호(FK), 찜 번호(PK, 자동 증가 번호))
					↑
					맛집 (맛집 번호(PK), 업체명...)	
		
		정규화
			=> 이상현상이 있는 테이블을 분해해서 이상현상을 방지하려는 목적
				수정 이상 / 삭제 이상
			
			장점 
				= 데이터베이스 변경 시 이상현상을 제거
				= 새로운 데이터 추가할 경우에 일부만 변경
				= 응용 프로그램 변경 시에 최소한의 영향

			단점
				= 테이블 분해 => JOIN이 많이 걸린다
				= 응답 속도가 느리다 => 반정규화를 사용하는 경우도 있다	


			------------------------------------
			학번	이름		과목
			------------------------------------
			1		홍길동		자바		
			------------------------------------
			2		심청이		오라클, HTML
			------------------------------------
			3		박문수		CSS, JSP, Spring => 취소 시에 수정이 어렵다
			------------------------------------						
			1) 모든 컬럼은 원자값을 가지고 있다
				=> 단일값 => ,를 찍으면 위반이 된다
				=> 1정규화 : 원자값 저장 유도

				---------------------------
				학번	이름		과목
				---------------------------
				1		홍길동		자바		
				---------------------------
				2		심청이		오라클
				---------------------------
				2		심청이		HTML
				---------------------------
				3		박문수		CSS
				---------------------------
				3		박문수		JSP
				---------------------------	
				3		박문수		Spring
				---------------------------
				=> 중복때문에 이상현상 발생
				=> 테이블을 나눠야 한다

					--------------		--------------
					학번	이름		학번	과목	
					--------------		--------------
					1		홍길동		1		자바
					--------------		--------------
					2		심청이		2		HTML
					--------------		--------------
					3		박문수		3		오라클
					--------------		--------------
					=> 컬럼의 원칙은 단일값
					=> 무결성 원칙 위반
					=> 2정규화 : 중복 제거


			2정규화 : 1정규화가 만족
				모든 컬럼은 부분적 종속을 제거 => 완전 함수 종속

				부분적 종속 : 기본키 중에 특정 컬럼에만 종속
				완전 함수 종속 : 기본키가 부분집합의 결정자가 되면 안 된다
			------------------------------------
			학번	과목		교수		성적
			------------------------------------
			1		JSP			홍길동		100
			------------------------------------
			2		Spring		박문수		90
			------------------------------------				
			3		CI/CD		이순신		80
			------------------------------------
			4		VueJS		홍길동		70				PRIMARY KEY(학번, 과목)
			------------------------------------			------
															 학번	===> 성적
															 과목	===> 교수
															------
			--------------------	------------
			학번	과목	성적	과목	교수
			--------------------	------------	
			1		JSP		100
			--------------------	------------
			2		Sprint	90
			--------------------	------------
			3		CI/CD	80
			--------------------	------------

			----				----
			학번 === 성적		과목 === 교수
			----				----


			3정규화 : 1정규화, 2정규화가 완료
				=> 학번 ===> 성적
				=> 강좌 이름 ===> 강의실

			---------------------------
			학번	과목	강의실	성적
			---------------------------
			1		JSP		A		3.5
			---------------------------
			2		JSP		A		4.0
			---------------------------
			3		Spring	B		3.9
			---------------------------
			3		CI/CD	C		4.2
			---------------------------

			수강						강의실
			--------------------		--------------
			학번	과목	성적		과목	강의실
			--------------------		--------------
			1							JSP
			--------------------		--------------
			2							Spring
			--------------------		--------------
			3							CI/CD
			--------------------		--------------
			학번 / 과목 ===> 성적		과목 ===> 강의실



		1정규화 : 각 컬럼은 한 개의 데이터만 저장 가능
			=> 여러 개인 경우 수정, 삭제 시에 이상현상 발생
			=> 원자값
	
		2정규화 : 중복된 데이터 제거
			=> 테이블을 분리
			=> 기본키가 아닌 다른 키를 이용해서 제어 
				= 이행적 함수
				= 부분적 함수 종속 (복합키)

		3정규화 : 한 개의 기본키를 가지고 테이블 제어
			=> 매핑 테이블
			=> JOIN이 만들 수 있다


	정규화
		-----------------------------------------------------------------------------------
		수강 (학번, 이름, 학과, 과목 코드, 과목명, 교수명, 성적)

		1. 문제점
			=> 학번 / 과목이 중복될 수 있다

		2. 이상현상
			=> 추가 이상(INSERT) : 수강이 안 된 학생은 등록이 불가능
			=> 수정 이상 : 학생의 이름 변경(개명) => 학번을 찾아서 모든 이름 변경
			=> 삭제 이상 : 수강 취소 => 모든 학번이 삭제

			함수 종속성 : 컬럼으로 제어 => 어디까지 제어
				학번으로 제어 => 이름 / 학과까지 제어
				과목 코드로 제어 => 과목명 / 교수명까지 제어
				학번 / 과목 코드로 제어 => 성적까지 제어

		3. 정규화
			1정규화 : 단일값 설정 (원자값) => 이미 완료

			2정규화 : 종속
				기본키 (복합키) => 제거
				학번 / 과목 코드 => PK => PRIMARY KEY (학번, 과목 코드)
				이름 / 학과 => 학번으로 제어가 가능하게 테이블 분리

				학생 테이블 (학번(PK), 이름, 학과) => 사각형
					| 학번으로 연결 => 1:N
				수강 테이블 (학번(FK), 과목코드(FK), 성적) => 마름모 (매핑테이블)
					| 과목코드로 연결 => 1:N
				과목 테이블 (과목코드(PK), 과목명, 교수명) => 사각형
				
				=> 중복 제거, PK와 FK를 이용해서 각 테이블 간의 연결
		-----------------------------------------------------------------------------------
		요구사항 (도서관 시스템)
			1. 도서관에서는 회원들이 책을 빌려간다
			2. 회원은 회원 번호 / 이름 / 전화번호 / 주소
			3. 책은 책id / 제목 / 저장 / 출판사
			4. 한 회원은 여러 권의 책을 빌릴 수 있다
				한 책은 여러 회원이 시간이 중복되지 않아야 빌려갈 수 있다
			5. 대출 시 일자 / 반납 예정일 / 반납일
			
			ERD 
				회원 테이블 (회원 번호(PK), 이름, 전화번호, 주소)				
				대출 테이블	(회원 번호(FK), 책id(FK), 대출 시 일자, 반납 예정일, 반납일)
				도서 테이블 (책id(PK), 제목, 저장, 출판사)

				회원 <--> 도서 => N:M => 매핑테이블(대출)을 통해 연결
				=> 복합키 (회원 번호(FK), 책id(FK))

		요구사항 (병원 시스템)
			1. 병원은 의사, 환자, 진료 기록을 관리한다
			2. 의사는 의사id, 이름, 전문 과목을 가진다
			3. 환자는 환자id, 이름, 생년월일, 전화번호를 가진다
			4. 한 의사는 여러 환자를 진료할 수 있으며 한 환자도 여러 의사에게 진료받을 수 있다
			5. 진료 시 진료 일자, 진료 내용, 진단명을 기록한다

			ERD
				의사 테이블 (의사id(PK), 이름, 전문 과목)
				환자 테이블 (환자id(PK), 이름, 생년월일, 전화번호)
				진료 테이블 (의사id(FK), 회원id(FK), 진료 일자, 진료 내용, 진단명)
			
				의사 --- 진료 => 1:N => 매핑테이블(진료)을 통해 연결
				진료 --- 환자 => N:1 		

		요구사항 (쇼핑몰 시스템)
			1. 쇼핑몰은 고객, 상품, 주문을 관리한다
			2. 고객은 고객id, 이름, 전화번호, 주소를 가진다
			3. 상품은 상품id, 상품명, 가격, 재고 수량을 가진다
			4. 고객은 여러 상품을 주문할 수 있도, 한 상품도 여러 고객에게 주문될 수 있다
			5. 주문 시 주문일자, 수량을 기록한다

			ERD
				고객 테이블(고객id(PK), 이름, 전화번호, 주소)
				상품 테이블(상품id(PK), 상품명, 가격, 재고 수량)
				주문 테이블(고객id(FK), 상품id(FK), 주문일자, 수량)

				고객 --- 주문 => 1:N => 매핑테이블(주문)을 통해 연결
				주문 --- 상품 => N:1

		요구사항 (영화관 시스템)
			1. 영화관은 고객과 상영 영화를 관리한다
			2. 고객은 고객 번호, 이름, 전화번호를 가진다
			3. 영화는 영화id, 제목, 장르, 상영 시간을 가진다
			4. 고객은 여러 영화를 예매할 수 있고, 각 예매마다 예매 일시와 좌석번호를 기록한다

			ERD
				고객 테이블(고객 번호(PK), 이름, 전화번호)
				영화 테이블(영화id(PK), 제목, 장르, 상영 시간)
				예매 테이블(예매 번호(PK), 고객 번호(FK), 영화id(FK), 예매 일시, 좌석 번호)

				고객 --- 예매 => 1:N => 매핑테이블(예매)을 통해 연결
				예매 --- 영화 => N:1
				=> 복합키 (고객 번호(FK), 영화id(FK))
*/